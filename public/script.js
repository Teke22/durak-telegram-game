const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
const RANK_VALUES = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    mode: new URLSearchParams(window.location.search).get('mode') || 'bot',
    deck: [],
    trumpSuit: '',
    playerHand: [],
    opponentHand: [],
    table: [],
    currentPlayer: 'player',
    status: 'waiting',
    trumpCard: null,
    attacker: 'player',
    defender: 'opponent',
    canAddCards: false,
    gameId: null,
    playerId: null,
    opponentId: null,
    isMultiplayer: false
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById('game-board');
const startButton = document.getElementById('start-game');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function initInterface() {
    const urlParams = new URLSearchParams(window.location.search);
    const mode = urlParams.get('mode') || 'bot';
    
    gameState.mode = mode;
    
    if (mode === 'bot') {
        showBotInterface();
    } else if (mode === 'create') {
        showMultiplayerCreateInterface();
    } else if (mode === 'join') {
        const gameId = urlParams.get('gameId');
        if (gameId) {
            showMultiplayerJoinInterface(gameId);
        } else {
            showMultiplayerCreateInterface();
        }
    } else {
        showBotInterface();
    }
}

function showBotInterface() {
    startButton.style.display = 'block';
    startButton.textContent = 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –±–æ—Ç–æ–º';
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üé¥ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º</h2>
            <p>–°—ã–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</p>
            <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</p>
        </div>
    `;
}

function showMultiplayerCreateInterface() {
    startButton.style.display = 'block';
    startButton.textContent = 'üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üë• –ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä</h2>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º</p>
            <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã —Å –¥—Ä—É–≥–æ–º</p>
        </div>
    `;
    
    startButton.addEventListener('click', createMultiplayerGame);
}

function showMultiplayerJoinInterface(gameId) {
    startButton.style.display = 'block';
    startButton.textContent = 'üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ</h2>
            <p>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: <strong>${gameId}</strong></p>
            <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</p>
        </div>
    `;
    
    startButton.addEventListener('click', () => joinMultiplayerGame(gameId));
}

// Multiplayer —Ñ—É–Ω–∫—Ü–∏–∏
async function createMultiplayerGame() {
    try {
        const response = await fetch('/api/create-game', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ playerId: tg.initDataUnsafe.user?.id || `user_${Date.now()}` })
        });
        
        const data = await response.json();
        
        gameState.gameId = data.gameId;
        gameState.playerId = data.playerId;
        gameState.isMultiplayer = true;
        
        gameBoard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: white;">
                <h2>üéÆ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</h2>
                <p>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: <strong>${data.gameId}</strong></p>
                <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º</p>
                <p>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</p>
            </div>
        `;
        
        startButton.style.display = 'none';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        const checkInterval = setInterval(async () => {
            const gameResponse = await fetch(`/api/game/${data.gameId}`);
            if (gameResponse.ok) {
                const gameData = await gameResponse.json();
                if (gameData.players.length === 2) {
                    clearInterval(checkInterval);
                    initMultiplayerGame(gameData);
                }
            }
        }, 3000);
        
    } catch (error) {
        console.error('Error creating game:', error);
        gameBoard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #ff4444;">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</p>
                <button onclick="location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

async function joinMultiplayerGame(gameId) {
    try {
        const response = await fetch(`/api/join-game/${gameId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ playerId: tg.initDataUnsafe.user?.id || `user_${Date.now()}` })
        });
        
        if (response.ok) {
            const data = await response.json();
            gameState.gameId = gameId;
            gameState.playerId = data.playerId;
            gameState.isMultiplayer = true;
            
            gameBoard.innerHTML = `
                <div style="text-align: center; padding: 20px; color: white;">
                    <h2>‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!</h2>
                    <p>–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</p>
                </div>
            `;
            
            startButton.style.display = 'none';
            initMultiplayerGame();
        } else {
            throw new Error('Join failed');
        }
        
    } catch (error) {
        console.error('Error joining game:', error);
        gameBoard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #ff4444;">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ</p>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã</p>
                <button onclick="location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
    }
}

function initMultiplayerGame() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è multiplayer –∏–≥—Ä—ã
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</h2>
            <p>Multiplayer —Ä–µ–∂–∏–º</p>
            <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–≥—Ä–∞...</p>
        </div>
    `;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
function initGame() {
    tg.HapticFeedback.impactOccurred('light');
    startButton.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
    gameState.deck = [];
    for (let suit of SUITS) {
        for (let rank of RANKS) {
            gameState.deck.push({ rank, suit, value: RANK_VALUES[rank] });
        }
    }
    shuffleDeck(gameState.deck);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å
    gameState.trumpCard = gameState.deck.pop();
    gameState.trumpSuit = gameState.trumpCard.suit;
    
    // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    gameState.playerHand = gameState.deck.splice(0, 6);
    gameState.opponentHand = gameState.deck.splice(0, 6);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫–∏
    sortHand(gameState.playerHand);
    sortHand(gameState.opponentHand);
    
    gameState.status = 'attacking';
    gameState.attacker = 'player';
    gameState.defender = 'opponent';
    gameState.table = [];
    gameState.canAddCards = false;
    
    renderGame();
}

// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
// (renderGame, attackWithCard, defendWithCard, takeCards, passTurn, –∏ —Ç.–¥.)

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
}

function sortHand(hand) {
    hand.sort((a, b) => {
        if (a.suit === gameState.trumpSuit && b.suit !== gameState.trumpSuit) return -1;
        if (a.suit !== gameState.trumpSuit && b.suit === gameState.trumpSuit) return 1;
        if (a.suit !== b.suit) return a.suit.localeCompare(b.suit);
        return a.value - b.value;
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
if (gameState.mode === 'bot') {
    startButton.addEventListener('click', initGame);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initInterface();

// –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('Script loaded successfully');
console.log('Game mode:', gameState.mode);
console.log('Telegram user:', tg.initDataUnsafe.user);