const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
const RANK_VALUES = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    mode: new URLSearchParams(window.location.search).get('mode') || 'bot',
    deck: [],
    trumpSuit: '',
    playerHand: [],
    botHand: [],
    table: [],
    currentPlayer: 'player',
    status: 'waiting',
    trumpCard: null,
    attacker: 'player',
    defender: 'bot',
    canAddCards: false
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById('game-board');
const startButton = document.getElementById('start-game');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    tg.HapticFeedback.impactOccurred('light');
    startButton.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
    gameState.deck = [];
    for (let suit of SUITS) {
        for (let rank of RANKS) {
            gameState.deck.push({ rank, suit, value: RANK_VALUES[rank] });
        }
    }
    shuffleDeck(gameState.deck);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å
    gameState.trumpCard = gameState.deck.pop();
    gameState.trumpSuit = gameState.trumpCard.suit;
    
    // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    gameState.playerHand = gameState.deck.splice(0, 6);
    gameState.botHand = gameState.deck.splice(0, 6);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫–∏
    sortHand(gameState.playerHand);
    sortHand(gameState.botHand);
    
    gameState.status = 'attacking';
    gameState.attacker = 'player';
    gameState.defender = 'bot';
    gameState.table = [];
    gameState.canAddCards = false;
    
    renderGame();
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–≥—Ä—ã
function renderGame() {
    gameBoard.innerHTML = '';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–∑—ã—Ä—å
    const header = document.createElement('div');
    header.innerHTML = `
        <h2>üé¥ –ü–æ–¥–∫–∏–¥–Ω–æ–π –¥—É—Ä–∞–∫</h2>
        <div class="trump-info">
            <strong>–ö–æ–∑—ã—Ä—å:</strong> ${gameState.trumpSuit}
            <div class="trump-card">${gameState.trumpCard.rank}${gameState.trumpCard.suit}</div>
        </div>
        <div class="game-status">${getStatusMessage()}</div>
    `;
    gameBoard.appendChild(header);
    
    // –ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
    if (gameState.table.length > 0) {
        renderTable();
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    renderActionButtons();
    
    // –†—É–∫–∞ –∏–≥—Ä–æ–∫–∞
    renderPlayerHand();
}

// –†–µ–Ω–¥–µ—Ä —Å—Ç–æ–ª–∞
function renderTable() {
    const tableSection = document.createElement('div');
    tableSection.className = 'table-section';
    tableSection.innerHTML = '<h3>–ù–∞ —Å—Ç–æ–ª–µ:</h3>';
    
    const tableCards = document.createElement('div');
    tableCards.className = 'table-cards';
    
    gameState.table.forEach((pair, index) => {
        const pairElement = document.createElement('div');
        pairElement.className = 'card-pair';
        
        // –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞
        const attackCard = createCardElement(pair.attack, false);
        pairElement.appendChild(attackCard);
        
        // –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (pair.defend) {
            const defendCard = createCardElement(pair.defend, false);
            defendCard.classList.add('defended');
            pairElement.appendChild(defendCard);
        }
        
        tableCards.appendChild(pairElement);
    });
    
    tableSection.appendChild(tableCards);
    gameBoard.appendChild(tableSection);
}

// –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
function renderActionButtons() {
    const actions = document.createElement('div');
    actions.className = 'action-buttons';
    
    if (gameState.status === 'defending' && gameState.currentPlayer === 'player') {
        const takeButton = document.createElement('button');
        takeButton.textContent = '–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã';
        takeButton.addEventListener('click', takeCards);
        actions.appendChild(takeButton);
    }
    
    if (gameState.status === 'attacking' && gameState.currentPlayer === 'player' && gameState.canAddCards) {
        const passButton = document.createElement('button');
        passButton.textContent = '–ë–∏—Ç–æ';
        passButton.addEventListener('click', passTurn);
        actions.appendChild(passButton);
    }
    
    if (actions.children.length > 0) {
        gameBoard.appendChild(actions);
    }
}

// –†–µ–Ω–¥–µ—Ä —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
function renderPlayerHand() {
    const handSection = document.createElement('div');
    handSection.className = 'hand-section';
    handSection.innerHTML = '<h3>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h3>';
    
    const playerCards = document.createElement('div');
    playerCards.className = 'player-cards';
    
    gameState.playerHand.forEach((card, index) => {
        const cardEl = createCardElement(card, true);
        
        if (gameState.currentPlayer === 'player') {
            if (gameState.status === 'attacking' && canAttackWithCard(card)) {
                cardEl.addEventListener('click', () => attackWithCard(card, index));
            } else if (gameState.status === 'defending' && canDefendWithCard(card)) {
                cardEl.addEventListener('click', () => defendWithCard(card, index));
            }
        }
        
        playerCards.appendChild(cardEl);
    });
    
    handSection.appendChild(playerCards);
    gameBoard.appendChild(handSection);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ –∫–∞—Ä—Ç–æ–π
function canAttackWithCard(card) {
    if (gameState.table.length === 0) return true;
    
    // –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ
    return gameState.table.some(pair => 
        pair.attack.rank === card.rank || (pair.defend && pair.defend.rank === card.rank)
    );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—Ç—ã –∫–∞—Ä—Ç–æ–π
function canDefendWithCard(card) {
    if (gameState.table.length === 0) return false;
    
    const lastPair = gameState.table[gameState.table.length - 1];
    if (lastPair.defend) return false; // –£–∂–µ –∑–∞—â–∏—â–µ–Ω–æ
    
    const attackCard = lastPair.attack;
    
    // –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –µ—Å–ª–∏:
    // 1. –¢–∞ –∂–µ –º–∞—Å—Ç—å –∏ —Å—Ç–∞—Ä—à–µ
    // 2. –ö–æ–∑—ã—Ä—å (–µ—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –∫–æ–∑—ã—Ä—å)
    if (card.suit === attackCard.suit) {
        return card.value > attackCard.value;
    }
    if (card.suit === gameState.trumpSuit && attackCard.suit !== gameState.trumpSuit) {
        return true;
    }
    return false;
}

// –ê—Ç–∞–∫–∞ –∫–∞—Ä—Ç–æ–π
function attackWithCard(card, index) {
    tg.HapticFeedback.impactOccurred('light');
    
    gameState.playerHand.splice(index, 1);
    gameState.table.push({ attack: card, defend: null });
    
    gameState.canAddCards = true;
    updateGameState();
}

// –ó–∞—â–∏—Ç–∞ –∫–∞—Ä—Ç–æ–π
function defendWithCard(card, index) {
    tg.HapticFeedback.impactOccurred('light');
    
    gameState.playerHand.splice(index, 1);
    gameState.table[gameState.table.length - 1].defend = card;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã
    const allDefended = gameState.table.every(pair => pair.defend);
    if (allDefended) {
        gameState.status = 'attacking';
        gameState.canAddCards = false;
    }
    
    updateGameState();
}

// –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã
function takeCards() {
    tg.HapticFeedback.impactOccurred('heavy');
    
    // –ò–≥—Ä–æ–∫ –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
    gameState.table.forEach(pair => {
        gameState.playerHand.push(pair.attack);
        if (pair.defend) {
            gameState.playerHand.push(pair.defend);
        }
    });
    
    gameState.table = [];
    gameState.status = 'attacking';
    gameState.attacker = 'bot';
    gameState.defender = 'player';
    gameState.currentPlayer = 'bot';
    gameState.canAddCards = false;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫—É
    sortHand(gameState.playerHand);
    
    renderGame();
    setTimeout(botMove, 1500);
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
function passTurn() {
    tg.HapticFeedback.impactOccurred('light');
    
    gameState.table = [];
    gameState.status = 'attacking';
    gameState.currentPlayer = 'bot';
    gameState.canAddCards = false;
    
    renderGame();
    setTimeout(botMove, 1500);
}

// –•–æ–¥ –±–æ—Ç–∞
function botMove() {
    if (gameState.status === 'attacking') {
        botAttack();
    } else {
        botDefend();
    }
}

// –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
function botAttack() {
    if (gameState.botHand.length === 0) {
        endGame('player');
        return;
    }
    
    let attackCard = null;
    let attackIndex = -1;
    
    if (gameState.table.length === 0) {
        // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        attackIndex = 0;
        attackCard = gameState.botHand[attackIndex];
    } else {
        // –ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
        for (let i = 0; i < gameState.botHand.length; i++) {
            const card = gameState.botHand[i];
            if (canAttackWithCard(card)) {
                attackCard = card;
                attackIndex = i;
                break;
            }
        }
    }
    
    if (attackCard && attackIndex !== -1) {
        gameState.botHand.splice(attackIndex, 1);
        gameState.table.push({ attack: attackCard, defend: null });
        gameState.status = 'defending';
        gameState.currentPlayer = 'player';
        gameState.canAddCards = true;
        
        renderGame();
    } else {
        // –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥
        gameState.table = [];
        gameState.status = 'attacking';
        gameState.attacker = 'player';
        gameState.defender = 'bot';
        gameState.currentPlayer = 'player';
        gameState.canAddCards = false;
        
        renderGame();
    }
}

// –ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
function botDefend() {
    const lastPair = gameState.table[gameState.table.length - 1];
    if (lastPair.defend) {
        // –£–∂–µ –∑–∞—â–∏—â–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        gameState.status = 'attacking';
        gameState.currentPlayer = 'bot';
        renderGame();
        setTimeout(botMove, 1500);
        return;
    }
    
    const attackCard = lastPair.attack;
    let defendCard = null;
    let defendIndex = -1;
    
    // –ò—â–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã
    for (let i = 0; i < gameState.botHand.length; i++) {
        const card = gameState.botHand[i];
        if (canDefendWithCard(card)) {
            defendCard = card;
            defendIndex = i;
            break;
        }
    }
    
    if (defendCard && defendIndex !== -1) {
        gameState.botHand.splice(defendIndex, 1);
        lastPair.defend = defendCard;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã
        const allDefended = gameState.table.every(pair => pair.defend);
        if (allDefended) {
            gameState.status = 'attacking';
            gameState.currentPlayer = 'bot';
        }
        
        renderGame();
        if (gameState.currentPlayer === 'bot') {
            setTimeout(botMove, 1500);
        }
    } else {
        // –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å—Å—è - –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
        gameState.table.forEach(pair => {
            gameState.botHand.push(pair.attack);
            if (pair.defend) {
                gameState.botHand.push(pair.defend);
            }
        });
        
        gameState.table = [];
        gameState.status = 'attacking';
        gameState.attacker = 'player';
        gameState.defender = 'bot';
        gameState.currentPlayer = 'player';
        
        sortHand(gameState.botHand);
        renderGame();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
}

function sortHand(hand) {
    hand.sort((a, b) => {
        if (a.suit === gameState.trumpSuit && b.suit !== gameState.trumpSuit) return -1;
        if (a.suit !== gameState.trumpSuit && b.suit === gameState.trumpSuit) return 1;
        if (a.suit !== b.suit) return a.suit.localeCompare(b.suit);
        return a.value - b.value;
    });
}

function createCardElement(card, clickable) {
    const cardEl = document.createElement('div');
    cardEl.className = `card ${clickable ? 'clickable' : ''} ${card.suit === gameState.trumpSuit ? 'trump' : ''}`;
    cardEl.innerHTML = `${card.rank}${card.suit}`;
    return cardEl;
}

function getStatusMessage() {
    if (gameState.status === 'attacking') {
        return gameState.currentPlayer === 'player' ? 
            '‚úÖ –í–∞—à —Ö–æ–¥. –ê—Ç–∞–∫—É–π—Ç–µ!' : 'ü§ñ –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç...';
    } else {
        return gameState.currentPlayer === 'player' ? 
            'üõ°Ô∏è –í–∞—à —Ö–æ–¥. –ó–∞—â–∏—â–∞–π—Ç–µ—Å—å!' : 'ü§ñ –ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è...';
    }
}

function updateGameState() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if (gameState.playerHand.length === 0 && gameState.deck.length === 0) {
        endGame('player');
        return;
    }
    if (gameState.botHand.length === 0 && gameState.deck.length === 0) {
        endGame('bot');
        return;
    }
    
    renderGame();
    
    if (gameState.currentPlayer === 'bot') {
        setTimeout(botMove, 1500);
    }
}

function endGame(winner) {
    const winnerText = winner === 'player' ? 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : 'ü§ñ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!';
    gameBoard.innerHTML = `
        <div class="game-over">
            <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <div class="winner">${winnerText}</div>
            <button onclick="location.reload()">üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    `;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
startButton.addEventListener('click', initGame);

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å –±–æ—Ç–æ–º
if (gameState.mode === 'bot') {
    startButton.style.display = 'block';
    gameBoard.innerHTML = '<p>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞!</p>';
} else {
    gameBoard.innerHTML = '<p>–†–µ–∂–∏–º –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!</p>';
}