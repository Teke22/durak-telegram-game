const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
const RANK_VALUES = { '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14 };

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    mode: new URLSearchParams(window.location.search).get('mode') || 'bot',
    deck: [],
    trumpSuit: '',
    playerHand: [],
    opponentHand: [],
    table: [],
    currentPlayer: 'player',
    status: 'waiting',
    trumpCard: null,
    attacker: 'player',
    defender: 'opponent',
    canAddCards: false,
    gameId: null,
    playerId: null,
    opponentId: null,
    isMultiplayer: false
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById('game-board');
const startButton = document.getElementById('start-game');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function initInterface() {
    const urlParams = new URLSearchParams(window.location.search);
    const mode = urlParams.get('mode') || 'bot';
    const gameId = urlParams.get('gameId');
    
    gameState.mode = mode;
    
    if (mode === 'bot') {
        showBotInterface();
    } else if (mode === 'create') {
        showMultiplayerCreateInterface();
    } else if (mode === 'join') {
        if (gameId) {
            showMultiplayerJoinInterface(gameId);
        } else {
            showMultiplayerJoinPrompt();
        }
    } else {
        showBotInterface();
    }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
function showBotInterface() {
    startButton.style.display = 'block';
    startButton.textContent = 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –±–æ—Ç–æ–º';
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üé¥ –ò–≥—Ä–∞ —Å –±–æ—Ç–æ–º</h2>
            <p>–°—ã–≥—Ä–∞–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞</p>
            <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</p>
        </div>
    `;
    
    startButton.onclick = initGame;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
function showMultiplayerJoinPrompt() {
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ</h2>
            <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:</p>
            <input type="text" id="game-code-input" placeholder="ABCDEF" 
                   style="padding: 12px; font-size: 18px; text-align: center; border-radius: 8px; border: 2px solid #ddd; width: 200px;"
                   maxlength="6">
            <br><br>
            <button onclick="joinWithCode()" 
                    style="padding: 12px 24px; font-size: 16px; border-radius: 8px; border: none; background: #007aff; color: white; cursor: pointer;">
                üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            </button>
            <br><br>
            <button onclick="showBotInterface()" 
                    style="padding: 10px 20px; font-size: 14px; border-radius: 6px; border: none; background: #6c757d; color: white; cursor: pointer;">
                ‚Ü©Ô∏è –ù–∞–∑–∞–¥
            </button>
        </div>
    `;
    
    startButton.style.display = 'none';
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
function showMultiplayerCreateInterface() {
    startButton.style.display = 'block';
    startButton.textContent = 'üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É';
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</h2>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º</p>
            <p>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã</p>
        </div>
    `;
    
    startButton.onclick = createMultiplayerGame;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ
function showMultiplayerJoinInterface(gameId) {
    startButton.style.display = 'block';
    startButton.textContent = 'üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ';
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ</h2>
            <p>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: <strong style="font-size: 24px;">${gameId}</strong></p>
            <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è</p>
        </div>
    `;
    
    startButton.onclick = () => joinMultiplayerGame(gameId);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–æ–¥—É
function joinWithCode() {
    const input = document.getElementById('game-code-input');
    const gameId = input.value.toUpperCase().trim();
    
    if (gameId.length === 6) {
        window.location.href = `?mode=join&gameId=${gameId}`;
    } else {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (6 —Å–∏–º–≤–æ–ª–æ–≤)'
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ multiplayer –∏–≥—Ä—ã
async function createMultiplayerGame() {
    try {
        const response = await fetch('/api/create-game', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ playerId: tg.initDataUnsafe.user?.id || `user_${Date.now()}` })
        });
        
        const data = await response.json();
        
        gameState.gameId = data.gameId;
        gameState.playerId = data.playerId;
        gameState.isMultiplayer = true;
        
        gameBoard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: white;">
                <h2>üéÆ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</h2>
                <p>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: </p>
                <div style="font-size: 32px; font-weight: bold; margin: 15px 0; background: rgba(255,255,255,0.9); padding: 10px; border-radius: 10px; color: #333;">
                    ${data.gameId}
                </div>
                
                <div style="display: flex; gap: 10px; justify-content: center; margin: 20px 0; flex-wrap: wrap;">
                    <button onclick="copyGameCode('${data.gameId}')" 
                            style="padding: 12px 20px; border-radius: 8px; border: none; background: #007aff; color: white; cursor: pointer;">
                        üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
                    </button>
                    <button onclick="shareGameCode('${data.gameId}')" 
                            style="padding: 12px 20px; border-radius: 8px; border: none; background: #28a745; color: white; cursor: pointer;">
                        üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                    </button>
                </div>
                
                <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–≥–æ–º</p>
                <p>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</p>
                
                <div style="margin: 20px 0; background: rgba(255,255,255,0.2); padding: 15px; border-radius: 10px;">
                    <p>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥—É –∫–æ–º–∞–Ω–¥—É:</p>
                    <p style="font-family: monospace; font-size: 16px; background: rgba(0,0,0,0.3); padding: 10px; border-radius: 5px;">
                        /join ${data.gameId}
                    </p>
                </div>
                
                <button onclick="location.reload()" 
                        style="padding: 10px 20px; border-radius: 6px; border: none; background: #dc3545; color: white; cursor: pointer;">
                    ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        `;
        
        startButton.style.display = 'none';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        const checkInterval = setInterval(async () => {
            try {
                const gameResponse = await fetch(`/api/game/${data.gameId}`);
                if (gameResponse.ok) {
                    const gameData = await gameResponse.json();
                    if (gameData.players.length === 2) {
                        clearInterval(checkInterval);
                        initMultiplayerGame(gameData);
                    }
                }
            } catch (error) {
                console.error('Error checking game status:', error);
            }
        }, 3000);
        
    } catch (error) {
        console.error('Error creating game:', error);
        gameBoard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #ff4444;">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</p>
                <button onclick="location.reload()" 
                        style="padding: 10px 20px; border-radius: 8px; border: none; background: #007aff; color: white; cursor: pointer;">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ multiplayer –∏–≥—Ä–µ
async function joinMultiplayerGame(gameId) {
    try {
        const response = await fetch(`/api/join-game/${gameId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ playerId: tg.initDataUnsafe.user?.id || `user_${Date.now()}` })
        });
        
        if (response.ok) {
            const data = await response.json();
            gameState.gameId = gameId;
            gameState.playerId = data.playerId;
            gameState.isMultiplayer = true;
            
            gameBoard.innerHTML = `
                <div style="text-align: center; padding: 20px; color: white;">
                    <h2>‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!</h2>
                    <p>–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...</p>
                    <div class="loading" style="margin: 20px;">
                        <div style="width: 40px; height: 40px; border: 4px solid #f3f3f3; border-top: 4px solid #007aff; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;"></div>
                    </div>
                </div>
            `;
            
            startButton.style.display = 'none';
            
            // –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            const waitInterval = setInterval(async () => {
                try {
                    const gameResponse = await fetch(`/api/game/${gameId}`);
                    if (gameResponse.ok) {
                        const gameData = await gameResponse.json();
                        if (gameData.status === 'playing') {
                            clearInterval(waitInterval);
                            initMultiplayerGame(gameData);
                        }
                    }
                } catch (error) {
                    console.error('Error waiting for game:', error);
                }
            }, 2000);
            
        } else {
            throw new Error('Join failed');
        }
        
    } catch (error) {
        console.error('Error joining game:', error);
        gameBoard.innerHTML = `
            <div style="text-align: center; padding: 20px; color: #ff4444;">
                <h2>‚ùå –û—à–∏–±–∫–∞</h2>
                <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ</p>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã</p>
                <button onclick="showMultiplayerJoinPrompt()" 
                        style="padding: 10px 20px; border-radius: 8px; border: none; background: #007aff; color: white; cursor: pointer;">
                    üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã
function copyGameCode(gameId) {
    navigator.clipboard.writeText(gameId).then(() => {
        tg.showPopup({
            title: '–£—Å–ø–µ—Ö',
            message: `–ö–æ–¥ ${gameId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`
        });
    }).catch(err => {
        tg.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥'
        });
    });
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã
function shareGameCode(gameId) {
    const shareText = `üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ –≤ –ü–æ–¥–∫–∏–¥–Ω–æ–≥–æ –¥—É—Ä–∞–∫–∞! –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: ${gameId}\n\n–ù–∞–ø–∏—à–∏ –±–æ—Ç—É: /join ${gameId}`;
    
    if (navigator.share) {
        navigator.share({
            title: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ',
            text: shareText
        });
    } else {
        navigator.clipboard.writeText(shareText).then(() => {
            tg.showPopup({
                title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
                message: '–¢–µ–∫—Å—Ç –¥–ª—èÂàÜ‰∫´ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä'
            });
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è multiplayer –∏–≥—Ä—ã
function initMultiplayerGame(gameData) {
    gameBoard.innerHTML = `
        <div style="text-align: center; padding: 20px; color: white;">
            <h2>üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</h2>
            <p>Multiplayer —Ä–µ–∂–∏–º</p>
            <p>–ò–≥—Ä–æ–∫–æ–≤: ${gameData.players.length}/2</p>
            <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–≥—Ä–∞...</p>
        </div>
    `;
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
    setTimeout(() => {
        tg.showPopup({
            title: '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
            message: 'Multiplayer —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!'
        });
    }, 1000);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º
function initGame() {
    tg.HapticFeedback.impactOccurred('light');
    startButton.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—É
    gameState.deck = [];
    for (let suit of SUITS) {
        for (let rank of RANKS) {
            gameState.deck.push({ rank, suit, value: RANK_VALUES[rank] });
        }
    }
    shuffleDeck(gameState.deck);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å
    gameState.trumpCard = gameState.deck.pop();
    gameState.trumpSuit = gameState.trumpCard.suit;
    
    // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    gameState.playerHand = gameState.deck.splice(0, 6);
    gameState.opponentHand = gameState.deck.splice(0, 6);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫–∏
    sortHand(gameState.playerHand);
    sortHand(gameState.opponentHand);
    
    gameState.status = 'attacking';
    gameState.attacker = 'player';
    gameState.defender = 'opponent';
    gameState.table = [];
    gameState.canAddCards = false;
    
    renderGame();
}

// –†–µ–Ω–¥–µ—Ä –∏–≥—Ä—ã
function renderGame() {
    gameBoard.innerHTML = '';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–∑—ã—Ä—å
    const header = document.createElement('div');
    header.innerHTML = `
        <h2>üé¥ –ü–æ–¥–∫–∏–¥–Ω–æ–π –¥—É—Ä–∞–∫</h2>
        <div class="trump-info">
            <strong>–ö–æ–∑—ã—Ä—å:</strong> ${gameState.trumpSuit}
            <div class="trump-card">${gameState.trumpCard.rank}${gameState.trumpCard.suit}</div>
        </div>
        <div class="game-status">${getStatusMessage()}</div>
    `;
    gameBoard.appendChild(header);
    
    // –ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
    if (gameState.table.length > 0) {
        renderTable();
    }
    
    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    renderActionButtons();
    
    // –†—É–∫–∞ –∏–≥—Ä–æ–∫–∞
    renderPlayerHand();
}

// –†–µ–Ω–¥–µ—Ä —Å—Ç–æ–ª–∞
function renderTable() {
    const tableSection = document.createElement('div');
    tableSection.className = 'table-section';
    tableSection.innerHTML = '<h3>–ù–∞ —Å—Ç–æ–ª–µ:</h3>';
    
    const tableCards = document.createElement('div');
    tableCards.className = 'table-cards';
    
    gameState.table.forEach((pair, index) => {
        const pairElement = document.createElement('div');
        pairElement.className = 'card-pair';
        
        // –ê—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞
        const attackCard = createCardElement(pair.attack, false);
        pairElement.appendChild(attackCard);
        
        // –ó–∞—â–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (pair.defend) {
            const defendCard = createCardElement(pair.defend, false);
            defendCard.classList.add('defended');
            pairElement.appendChild(defendCard);
        }
        
        tableCards.appendChild(pairElement);
    });
    
    tableSection.appendChild(tableCards);
    gameBoard.appendChild(tableSection);
}

// –†–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
function renderActionButtons() {
    const actions = document.createElement('div');
    actions.className = 'action-buttons';
    
    if (gameState.status === 'defending' && gameState.currentPlayer === 'player') {
        const takeButton = document.createElement('button');
        takeButton.textContent = '–í–∑—è—Ç—å –∫–∞—Ä—Ç—ã';
        takeButton.addEventListener('click', takeCards);
        actions.appendChild(takeButton);
    }
    
    if (gameState.status === 'attacking' && gameState.currentPlayer === 'player' && gameState.canAddCards) {
        const passButton = document.createElement('button');
        passButton.textContent = '–ë–∏—Ç–æ';
        passButton.addEventListener('click', passTurn);
        actions.appendChild(passButton);
    }
    
    if (actions.children.length > 0) {
        gameBoard.appendChild(actions);
    }
}

// –†–µ–Ω–¥–µ—Ä —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
function renderPlayerHand() {
    const handSection = document.createElement('div');
    handSection.className = 'hand-section';
    handSection.innerHTML = '<h3>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h3>';
    
    const playerCards = document.createElement('div');
    playerCards.className = 'player-cards';
    
    gameState.playerHand.forEach((card, index) => {
        const cardEl = createCardElement(card, true);
        
        if (gameState.currentPlayer === 'player') {
            if (gameState.status === 'attacking' && canAttackWithCard(card)) {
                cardEl.addEventListener('click', () => attackWithCard(card, index));
            } else if (gameState.status === 'defending' && canDefendWithCard(card)) {
                cardEl.addEventListener('click', () => defendWithCard(card, index));
            }
        }
        
        playerCards.appendChild(cardEl);
    });
    
    handSection.appendChild(playerCards);
    gameBoard.appendChild(handSection);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ –∫–∞—Ä—Ç–æ–π
function canAttackWithCard(card) {
    if (gameState.table.length === 0) return true;
    
    // –ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–¥—ã–≤–∞—Ç—å –∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, —á—Ç–æ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ
    return gameState.table.some(pair => 
        pair.attack.rank === card.rank || (pair.defend && pair.defend.rank === card.rank)
    );
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—â–∏—Ç—ã –∫–∞—Ä—Ç–æ–π
function canDefendWithCard(card) {
    if (gameState.table.length === 0) return false;
    
    const lastPair = gameState.table[gameState.table.length - 1];
    if (lastPair.defend) return false; // –£–∂–µ –∑–∞—â–∏—â–µ–Ω–æ
    
    const attackCard = lastPair.attack;
    
    // –ö–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –µ—Å–ª–∏:
    // 1. –¢–∞ –∂–µ –º–∞—Å—Ç—å –∏ —Å—Ç–∞—Ä—à–µ
    // 2. –ö–æ–∑—ã—Ä—å (–µ—Å–ª–∏ –∞—Ç–∞–∫—É—é—â–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –∫–æ–∑—ã—Ä—å)
    if (card.suit === attackCard.suit) {
        return card.value > attackCard.value;
    }
    if (card.suit === gameState.trumpSuit && attackCard.suit !== gameState.trumpSuit) {
        return true;
    }
    return false;
}

// –ê—Ç–∞–∫–∞ –∫–∞—Ä—Ç–æ–π
function attackWithCard(card, index) {
    tg.HapticFeedback.impactOccurred('light');
    
    gameState.playerHand.splice(index, 1);
    gameState.table.push({ attack: card, defend: null });
    
    gameState.canAddCards = true;
    updateGameState();
}

// –ó–∞—â–∏—Ç–∞ –∫–∞—Ä—Ç–æ–π
function defendWithCard(card, index) {
    tg.HapticFeedback.impactOccurred('light');
    
    gameState.playerHand.splice(index, 1);
    gameState.table[gameState.table.length - 1].defend = card;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã
    const allDefended = gameState.table.every(pair => pair.defend);
    if (allDefended) {
        gameState.status = 'attacking';
        gameState.canAddCards = false;
    }
    
    updateGameState();
}

// –í–∑—è—Ç—å –∫–∞—Ä—Ç—ã
function takeCards() {
    tg.HapticFeedback.impactOccurred('heavy');
    
    // –ò–≥—Ä–æ–∫ –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
    gameState.table.forEach(pair => {
        gameState.playerHand.push(pair.attack);
        if (pair.defend) {
            gameState.playerHand.push(pair.defend);
        }
    });
    
    gameState.table = [];
    gameState.status = 'attacking';
    gameState.attacker = 'bot';
    gameState.defender = 'player';
    gameState.currentPlayer = 'bot';
    gameState.canAddCards = false;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫—É
    sortHand(gameState.playerHand);
    
    renderGame();
    setTimeout(botMove, 1500);
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥
function passTurn() {
    tg.HapticFeedback.impactOccurred('light');
    
    gameState.table = [];
    gameState.status = 'attacking';
    gameState.currentPlayer = 'bot';
    gameState.canAddCards = false;
    
    renderGame();
    setTimeout(botMove, 1500);
}

// –•–æ–¥ –±–æ—Ç–∞
function botMove() {
    if (gameState.status === 'attacking') {
        botAttack();
    } else {
        botDefend();
    }
}

// –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç
function botAttack() {
    if (gameState.botHand.length === 0) {
        endGame('player');
        return;
    }
    
    let attackCard = null;
    let attackIndex = -1;
    
    if (gameState.table.length === 0) {
        // –ü–µ—Ä–≤–∞—è –∞—Ç–∞–∫–∞ - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        attackIndex = 0;
        attackCard = gameState.botHand[attackIndex];
    } else {
        // –ü–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≥–æ –∂–µ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞
        for (let i = 0; i < gameState.botHand.length; i++) {
            const card = gameState.botHand[i];
            if (canAttackWithCard(card)) {
                attackCard = card;
                attackIndex = i;
                break;
            }
        }
    }
    
    if (attackCard && attackIndex !== -1) {
        gameState.botHand.splice(attackIndex, 1);
        gameState.table.push({ attack: attackCard, defend: null });
        gameState.status = 'defending';
        gameState.currentPlayer = 'player';
        gameState.canAddCards = true;
        
        renderGame();
    } else {
        // –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å - –∑–∞–≤–µ—Ä—à–∞–µ–º —Ö–æ–¥
        gameState.table = [];
        gameState.status = 'attacking';
        gameState.attacker = 'player';
        gameState.defender = 'bot';
        gameState.currentPlayer = 'player';
        gameState.canAddCards = false;
        
        renderGame();
    }
}

// –ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è
function botDefend() {
    const lastPair = gameState.table[gameState.table.length - 1];
    if (lastPair.defend) {
        // –£–∂–µ –∑–∞—â–∏—â–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        gameState.status = 'attacking';
        gameState.currentPlayer = 'bot';
        renderGame();
        setTimeout(botMove, 1500);
        return;
    }
    
    const attackCard = lastPair.attack;
    let defendCard = null;
    let defendIndex = -1;
    
    // –ò—â–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞—â–∏—Ç—ã
    for (let i = 0; i < gameState.botHand.length; i++) {
        const card = gameState.botHand[i];
        if (canDefendWithCard(card)) {
            defendCard = card;
            defendIndex = i;
            break;
        }
    }
    
    if (defendCard && defendIndex !== -1) {
        gameState.botHand.splice(defendIndex, 1);
        lastPair.defend = defendCard;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä—ã –∑–∞—â–∏—â–µ–Ω—ã
        const allDefended = gameState.table.every(pair => pair.defend);
        if (allDefended) {
            gameState.status = 'attacking';
            gameState.currentPlayer = 'bot';
        }
        
        renderGame();
        if (gameState.currentPlayer === 'bot') {
            setTimeout(botMove, 1500);
        }
    } else {
        // –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å—Å—è - –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã
        gameState.table.forEach(pair => {
            gameState.botHand.push(pair.attack);
            if (pair.defend) {
                gameState.botHand.push(pair.defend);
            }
        });
        
        gameState.table = [];
        gameState.status = 'attacking';
        gameState.attacker = 'player';
        gameState.defender = 'bot';
        gameState.currentPlayer = 'player';
        
        sortHand(gameState.botHand);
        renderGame();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
}

function sortHand(hand) {
    hand.sort((a, b) => {
        if (a.suit === gameState.trumpSuit && b.suit !== gameState.trumpSuit) return -1;
        if (a.suit !== gameState.trumpSuit && b.suit === gameState.trumpSuit) return 1;
        if (a.suit !== b.suit) return a.suit.localeCompare(b.suit);
        return a.value - b.value;
    });
}

function createCardElement(card, clickable) {
    const cardEl = document.createElement('div');
    cardEl.className = `card ${clickable ? 'clickable' : ''} ${card.suit === gameState.trumpSuit ? 'trump' : ''}`;
    cardEl.innerHTML = `${card.rank}${card.suit}`;
    return cardEl;
}

function getStatusMessage() {
    if (gameState.status === 'attacking') {
        return gameState.currentPlayer === 'player' ? 
            '‚úÖ –í–∞—à —Ö–æ–¥. –ê—Ç–∞–∫—É–π—Ç–µ!' : 'ü§ñ –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç...';
    } else {
        return gameState.currentPlayer === 'player' ? 
            'üõ°Ô∏è –í–∞—à —Ö–æ–¥. –ó–∞—â–∏—â–∞–π—Ç–µ—Å—å!' : 'ü§ñ –ë–æ—Ç –∑–∞—â–∏—â–∞–µ—Ç—Å—è...';
    }
}

function updateGameState() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
    if (gameState.playerHand.length === 0 && gameState.deck.length === 0) {
        endGame('player');
        return;
    }
    if (gameState.botHand.length === 0 && gameState.deck.length === 0) {
        endGame('bot');
        return;
    }
    
    renderGame();
    
    if (gameState.currentPlayer === 'bot') {
        setTimeout(botMove, 1500);
    }
}

function endGame(winner) {
    const winnerText = winner === 'player' ? 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏!' : 'ü§ñ –ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!';
    gameBoard.innerHTML = `
        <div class="game-over">
            <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <div class="winner">${winnerText}</div>
            <button onclick="location.reload()" 
                    style="padding: 12px 24px; border-radius: 8px; border: none; background: #007aff; color: white; cursor: pointer;">
                üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    `;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.joinWithCode = joinWithCode;
window.copyGameCode = copyGameCode;
window.shareGameCode = shareGameCode;
window.showBotInterface = showBotInterface;
window.showMultiplayerJoinPrompt = showMultiplayerJoinPrompt;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
initInterface();

// –°—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
`;
document.head.appendChild(style);

// –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('Script loaded successfully');
console.log('Game mode:', gameState.mode);
console.log('Telegram user:', tg.initDataUnsafe.user);