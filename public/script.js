const tg = window.Telegram.WebApp;
tg.expand();
tg.enableClosingConfirmation();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const SUITS = ['‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
const RANKS = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
const RANK_VALUES = { '6': 0, '7': 1, '8': 2, '9': 3, '10': 4, 'J': 5, 'Q': 6, 'K': 7, 'A': 8 };

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    mode: new URLSearchParams(window.location.search).get('mode') || 'bot',
    deck: [],
    trumpSuit: '',
    playerHand: [],
    botHand: [],
    table: [],
    currentPlayer: 'player',
    status: 'waiting',
    trumpCard: null
};

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const gameBoard = document.getElementById('game-board');
const startButton = document.getElementById('start-game');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    tg.HapticFeedback.impactOccurred('light');
    startButton.style.display = 'none';
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É
    gameState.deck = [];
    for (let suit of SUITS) {
        for (let rank of RANKS) {
            gameState.deck.push({ rank, suit });
        }
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    shuffleDeck(gameState.deck);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å
    gameState.trumpCard = gameState.deck.pop();
    gameState.trumpSuit = gameState.trumpCard.suit;
    
    // –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    gameState.playerHand = gameState.deck.splice(0, 6);
    gameState.botHand = gameState.deck.splice(0, 6);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä—É–∫–∏
    sortHand(gameState.playerHand);
    sortHand(gameState.botHand);
    
    gameState.status = 'playing';
    renderGame();
}

// –†–µ–Ω–¥–µ—Ä –∏–≥—Ä—ã
function renderGame() {
    gameBoard.innerHTML = '';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–∑—ã—Ä—å
    const header = document.createElement('div');
    header.innerHTML = `
        <h2>üé¥ –ü–æ–¥–∫–∏–¥–Ω–æ–π –¥—É—Ä–∞–∫</h2>
        <div class="trump-info">
            <strong>–ö–æ–∑—ã—Ä—å:</strong> ${gameState.trumpSuit}
            <div class="trump-card">${gameState.trumpCard.rank}${gameState.trumpCard.suit}</div>
        </div>
    `;
    gameBoard.appendChild(header);
    
    // –ö–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
    if (gameState.table.length > 0) {
        const tableSection = document.createElement('div');
        tableSection.className = 'table-section';
        tableSection.innerHTML = '<h3>–ù–∞ —Å—Ç–æ–ª–µ:</h3>';
        
        const tableCards = document.createElement('div');
        tableCards.className = 'table-cards';
        
        gameState.table.forEach(card => {
            const cardEl = createCardElement(card, false);
            tableCards.appendChild(cardEl);
        });
        
        tableSection.appendChild(tableCards);
        gameBoard.appendChild(tableSection);
    }
    
    // –†—É–∫–∞ –∏–≥—Ä–æ–∫–∞
    const playerHandSection = document.createElement('div');
    playerHandSection.className = 'hand-section';
    playerHandSection.innerHTML = '<h3>–í–∞—à–∏ –∫–∞—Ä—Ç—ã:</h3>';
    
    const playerCards = document.createElement('div');
    playerCards.className = 'player-cards';
    
    gameState.playerHand.forEach((card, index) => {
        const cardEl = createCardElement(card, true);
        cardEl.addEventListener('click', () => playCard(card, index));
        playerCards.appendChild(cardEl);
    });
    
    playerHandSection.appendChild(playerCards);
    gameBoard.appendChild(playerHandSection);
    
    // –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
    const statusEl = document.createElement('div');
    statusEl.className = 'game-status';
    statusEl.innerHTML = gameState.currentPlayer === 'player' ? 
        '–í–∞—à —Ö–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –∞—Ç–∞–∫–∏.' : '–•–æ–¥ –±–æ—Ç–∞...';
    gameBoard.appendChild(statusEl);
    
    // –ï—Å–ª–∏ —Ö–æ–¥ –±–æ—Ç–∞
    if (gameState.currentPlayer === 'bot') {
        setTimeout(botMove, 1500);
    }
}

// –•–æ–¥ –∏–≥—Ä–æ–∫–∞
function playCard(card, index) {
    if (gameState.currentPlayer !== 'player') return;
    
    // –£–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏
    gameState.playerHand.splice(index, 1);
    gameState.table.push(card);
    gameState.currentPlayer = 'bot';
    
    renderGame();
    tg.HapticFeedback.impactOccurred('light');
}

// –•–æ–¥ –±–æ—Ç–∞
function botMove() {
    if (gameState.botHand.length === 0) return;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ - —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ–π
    const card = gameState.botHand.shift();
    gameState.table.push(card);
    gameState.currentPlayer = 'player';
    
    renderGame();
    tg.HapticFeedback.impactOccurred('light');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
}

function sortHand(hand) {
    hand.sort((a, b) => {
        if (a.suit === gameState.trumpSuit && b.suit !== gameState.trumpSuit) return -1;
        if (a.suit !== gameState.trumpSuit && b.suit === gameState.trumpSuit) return 1;
        return RANK_VALUES[a.rank] - RANK_VALUES[b.rank];
    });
}

function createCardElement(card, clickable) {
    const cardEl = document.createElement('div');
    cardEl.className = `card ${clickable ? 'clickable' : ''} ${card.suit === gameState.trumpSuit ? 'trump' : ''}`;
    cardEl.innerHTML = `${card.rank}${card.suit}`;
    return cardEl;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
startButton.addEventListener('click', initGame);

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å –±–æ—Ç–æ–º
if (gameState.mode === 'bot') {
    startButton.style.display = 'block';
    gameBoard.innerHTML = '<p>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞!</p>';
} else {
    gameBoard.innerHTML = '<p>–†–µ–∂–∏–º –∏–≥—Ä—ã —Å –¥—Ä—É–≥–æ–º —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!</p>';
}